generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ENUMS for predefined choices
enum UserRoles {
  CUSTOMER
  ADMIN
}

enum OrderStatuses {
  PENDING // Order placed, awaiting payment/processing
  PROCESSING // Payment received, being prepared
  READY_FOR_PICKUP
  OUT_FOR_DELIVERY
  COMPLETED
  CANCELLED
}

enum FulfillmentTypes {
  DELIVERY
  PICKUP
}

enum PaymentMethod {
  ONLINE
  INSTORE
}

// MODELS for database tables
model Users {
  id         String        @id @default(cuid())
  email      String        @unique
  name       String
  password   String // Will be a hashed password
  imageUrl   String? // Nullable, optional profile picture
  isVerified Boolean       @default(false)
  role       UserRoles     @default(CUSTOMER)
  orders     Orders[]
  addresses  Addresses[]
  cart       Carts?
  tokens     Tokens[]
  reviews    Reviews[]
  likes      ReviewLikes[]
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model Addresses {
  id          String   @id @default(cuid())
  receiver    String
  userId      String
  user        Users    @relation(fields: [userId], references: [id])
  street      String
  subdistrict String
  district    String
  city        String
  province    String
  postalCode  String
  phone       String
  latitude    Float?
  longitude   Float?
  isDefault   Boolean  @default(false)
  orders      Orders[]
}

model Products {
  id            String          @id @default(cuid())
  name          String          @unique
  description   String
  price         Float // Store price in the smallest currency unit (e.g., Rupiah) as an Integer in production
  stock         Int
  weightInKg    Float // Crucial for delivery calculation
  categoryId    String
  sale          Int?
  rating        Float? // Average rating, nullable if no ratings yet
  category      Categories      @relation(fields: [categoryId], references: [id])
  orderItems    OrderItems[]
  cartItems     CartItems[]
  productPhotos ProductPhotos[]
  reviews       Reviews[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model ProductPhotos {
  id        String   @id @default(cuid())
  productId String
  product   Products @relation(fields: [productId], references: [id])
  imageUrl  String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Categories {
  id       String     @id @default(cuid())
  name     String     @unique
  imageUrl String?
  products Products[]
}

model Carts {
  id        String      @id @default(cuid())
  userId    String      @unique // Each user has one cart
  user      Users       @relation(fields: [userId], references: [id])
  items     CartItems[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model CartItems {
  id        String   @id @default(cuid())
  cartId    String
  cart      Carts    @relation(fields: [cartId], references: [id])
  productId String
  product   Products @relation(fields: [productId], references: [id])
  quantity  Int

  @@unique([cartId, productId]) // Prevents adding the same product twice
}

model Orders {
  id              String           @id @default(cuid())
  userId          String
  user            Users            @relation(fields: [userId], references: [id])
  items           OrderItems[]
  totalAmount     Float
  totalWeight     Float            @default(0) // Total weight of the order in kg
  status          OrderStatuses    @default(PENDING)
  fulfillmentType FulfillmentTypes
  courier         String?
  paymentMethod   PaymentMethod
  addressId       String? // Nullable, only for delivery orders
  address         Addresses?       @relation(fields: [addressId], references: [id])
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
}

model OrderItems {
  id              String   @id @default(cuid())
  orderId         String
  order           Orders   @relation(fields: [orderId], references: [id])
  productId       String
  product         Products @relation(fields: [productId], references: [id])
  quantity        Int
  priceAtPurchase Float // Price of the product at the time of order
}

model Tokens {
  id        String   @id @default(cuid())
  userId    String
  user      Users    @relation(fields: [userId], references: [id])
  token     String   @unique
  isValid   Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reviews {
  id           String         @id @default(cuid())
  userId       String
  user         Users          @relation(fields: [userId], references: [id])
  productId    String
  product      Products       @relation(fields: [productId], references: [id])
  desc         String
  rating       Int
  likeCount    Int?
  likes        ReviewLikes[]
  reviewPhotos ReviewPhotos[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@unique([userId, productId])
}

model ReviewPhotos {
  id        String   @id @default(cuid())
  reviewId  String
  review    Reviews  @relation(fields: [reviewId], references: [id])
  imageUrl  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReviewLikes {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId String
  user   Users  @relation(fields: [userId], references: [id])

  reviewId String
  review   Reviews @relation(fields: [reviewId], references: [id])
  

  @@unique([userId, reviewId])
}
