
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


// ENUMS for predefined choices
enum UserRoles {
  CUSTOMER
  ADMIN
}

enum OrderStatuses {
  PENDING      // Order placed, awaiting payment/processing
  PROCESSING   // Payment received, being prepared
  READY_FOR_PICKUP
  OUT_FOR_DELIVERY
  COMPLETED
  CANCELLED
}

enum FulfillmentTypes {
  DELIVERY
  PICKUP
}

enum PaymentMethod {
  ONLINE
  INSTORE
}

// MODELS for database tables
model Users {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String   // Will be a hashed password
  imageUrl  String?  // Nullable, optional profile picture
  isVerified Boolean  @default(false)
  role      UserRoles @default(CUSTOMER)
  orders    Orders[]
  addresses Addresses[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Addresses {
  id         String  @id @default(cuid())
  userId     String
  user       Users    @relation(fields: [userId], references: [id])
  street     String
  city       String
  postalCode String
  isDefault  Boolean @default(false)
}

model Products {
  id          String       @id @default(cuid())
  name        String      @unique
  description String
  price       Float        // Store price in the smallest currency unit (e.g., Rupiah) as an Integer in production
  imageUrl    String?
  stock       Int
  weightInKg  Float        // Crucial for delivery calculation
  categoryId  String
  rating      Float?      // Average rating, nullable if no ratings yet
  category    Categories     @relation(fields: [categoryId], references: [id])
  orderItems  OrderItems[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Categories {
  id       String    @id @default(cuid())
  name     String    @unique
  products Products[]
}

model Orders {
  id              String          @id @default(cuid())
  userId          String
  user            Users            @relation(fields: [userId], references: [id])
  items           OrderItems[]
  totalAmount     Float            // Includes delivery fee
  deliveryFee     Float           @default(0)
  status          OrderStatuses     @default(PENDING)
  fulfillmentType FulfillmentTypes
  paymentMethod   PaymentMethod
  shippingAddress String?         // Nullable, only for delivery orders
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model OrderItems {
  id             String  @id @default(cuid())
  orderId        String
  order          Orders   @relation(fields: [orderId], references: [id])
  productId      String
  product        Products @relation(fields: [productId], references: [id])
  quantity       Int
  priceAtPurchase Float  // Price of the product at the time of order
}        